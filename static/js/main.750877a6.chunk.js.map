{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","console","log","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"qPAceA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC1B,OACE,sBAAKC,UAAU,oDAAf,UACE,qBAAKC,IAAG,+BAA0BF,EAA1B,WAAuCG,IAAI,WACnD,gCACE,6BAAKL,IACL,4BAAIC,WCaGK,EAlBE,SAAC,GAAe,IAAbC,EAAY,EAAZA,OAClB,OACE,gCAEIA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OACE,cAAC,EAAD,CAEAR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHXS,MALd,QCUWC,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC/B,OACE,qBAAKV,UAAU,MAAf,SACE,uBACAA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCEDI,EATA,SAACC,GAEd,OADAC,QAAQC,IAAIF,GAEV,qBAAKG,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAO,SAAnE,SACGN,EAAMO,YCmCEC,G,wDAlCb,aAAc,IAAD,8BACX,gBAYFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACjB,YAAagB,EAAME,OAAOC,SAZzC,EAAKC,MAAO,CACVzB,OAAQ,GACRK,YAAY,IAJH,E,qDAOb,WAAoB,IAAD,OACjBqB,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAG,EAAKR,SAAS,CAACtB,OAAQ8B,S,oBAOzC,WAAS,IAAD,OACAC,EAAiBC,KAAKP,MAAMzB,OAAOiC,QAAO,SAAAjC,GAC9C,OAAOA,EAAOP,KAAKyC,cAAcC,SAAS,EAAKV,MAAMpB,YAAY6B,kBAEnE,OACE,sBAAKtC,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWU,aAAe0B,KAAKZ,iBAC/B,cAAC,EAAD,UACE,cAAC,EAAD,CAAUpB,OAAS+B,a,GA3BXK,IAAMC,YCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAMjDX,M","file":"static/js/main.750877a6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n  return (\r\n    <div className='tc bg-light-red dib br2 pa1 ma3 grow bw2 shadow-2'>\r\n      <img src={`https://robohash.org/${id}200x200`} alt='robots' />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ robots })=> {\r\n  return(\r\n    <div>\r\n      {\r\n        robots.map((user, i)=>{\r\n          return (\r\n            <Card\r\n            key= {i}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n            />\r\n          );\r\n        })  \r\n      };\r\n    </div>\r\n  );\r\n}\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n  return(\r\n    <div className='pa1'>\r\n      <input\r\n      className='pa3 ba b--green bg-lightest-blue'\r\n      type='search'\r\n      placeholder='search robots'\r\n      onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n  console.log(props);\r\n  return (\r\n    <div style={{overflowY: 'scroll', border:'1px solid black', height:'800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport Scroll from './Scroll'\r\nimport './App.css'\r\n\r\nclass App extends React.Component {\r\n  constructor(){\r\n    super()\r\n    this.state ={\r\n      robots: [],\r\n      searchfield:''\r\n    }\r\n  }\r\n  componentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response=> response.json())\r\n      .then(users=> this.setState({robots: users}));\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({searchfield: event.target.value})\r\n  }\r\n\r\n  render(){\r\n    const filteredRobots = this.state.robots.filter(robots =>{\r\n      return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n    })\r\n    return(\r\n      <div className='tc'>\r\n        <h1 className='f2'>RoboFriends</h1>\r\n        <SearchBox searchChange={ this.onSearchChange }/>\r\n        <Scroll>\r\n          <CardList robots={ filteredRobots }/>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}